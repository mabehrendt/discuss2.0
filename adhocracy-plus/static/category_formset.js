"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkadhocracy_plus"] = self["webpackChunkadhocracy_plus"] || []).push([["category_formset"],{

/***/ "./node_modules/adhocracy4/adhocracy4/categories/assets/category_formset.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/adhocracy4/adhocracy4/categories/assets/category_formset.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("/* provided dependency */ var __webpack_provided_window_dot_jQuery = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.min.js\");\n\n\nwindow.addEventListener('load', function () {\n  var formsets = document.querySelectorAll('.js-formset');\n  var PLACEHOLDER = /__prefix__/g;\n  var dynamicFormSets = [];\n  var selectDropdownSettings = {\n    style: 'category-icon-select__btn',\n    styleDropdown: 'category-icon-select'\n  };\n\n  // empty formset created on page load\n  // used in: module_label_forms, module_category_forms {include inline_form}\n  var DynamicFormSet = function DynamicFormSet(formset) {\n    this.formset = formset;\n    this.formTemplate = this.formset.querySelector('.js-form-template');\n    // prefix from django form modal\n    this.prefix = this.formset.dataset.prefix;\n    this.totalInput = this.formset.querySelector('#id_' + this.prefix + '-TOTAL_FORMS');\n    this.total = parseInt(this.totalInput.value);\n    // maxNum from django form modal\n    this.maxNum = parseInt(this.formset.querySelector('#id_' + this.prefix + '-MAX_NUM_FORMS').value);\n    this.formset.querySelector('.js-add-form').addEventListener('click', addForm.bind(this));\n  };\n\n  // checks if max forms reached and inserts field before hidden template element\n  var addForm = function addForm() {\n    if (this.total < this.maxNum) {\n      this.total += 1;\n      this.totalInput.value = this.total;\n      var newForm = getNewForm(this.formTemplate, this.total - 1);\n      this.formTemplate.insertAdjacentHTML('beforebegin', newForm);\n\n      // take new field and add event listener to delete btn\n      this.formTemplate.previousElementSibling.querySelector('.js-remove-form').addEventListener('click', removeForm.bind(this));\n      // only calling jquery for select dropdown (used for icon select for map modules)\n      if (__webpack_provided_window_dot_jQuery.fn.selectdropdown) {\n        __webpack_provided_window_dot_jQuery(this.formTemplate.previousElementSibling.querySelector('.category-icon-select')).selectdropdown(selectDropdownSettings);\n      }\n    }\n  };\n\n  // list all fields and remove field before save\n  var removeForm = function removeForm(event) {\n    var _this = this;\n    this.total -= 1;\n    this.totalInput.value = this.total;\n    var form = event.currentTarget.closest('.js-form');\n    var id = Array.from(this.formset.querySelectorAll('.js-form')).indexOf(form);\n\n    // update index prefix of all elements in fields after removed field\n    var updateAttr = function updateAttr(element, key, i) {\n      // boolean to check attribute\n      if (element.hasAttribute(key)) {\n        var _old = _this.prefix + '-' + (id + i + 1);\n        var _new = _this.prefix + '-' + (id + i);\n        element.setAttribute(key, element.getAttribute(key).replace(_old, _new));\n      }\n    };\n\n    // loop through elements in field and run updateAttr to ensure correct index\n    var nextSibling = form.nextElementSibling;\n    while (nextSibling && nextSibling !== this.formTemplate) {\n      Array.from(nextSibling.firstElementChild.children).forEach(function (element, i) {\n        updateAttr(element, 'name', i);\n        updateAttr(element, 'for', i);\n        updateAttr(element, 'id', i);\n      });\n      nextSibling = nextSibling.nextElementSibling;\n    }\n    form.remove();\n  };\n\n  // create a form as a string object, replacing prefix with correct id\n  function getNewForm(formTemplate, id) {\n    var gotForm = formTemplate.innerHTML.replace(PLACEHOLDER, id);\n    return gotForm;\n  }\n  formsets.forEach(function (formset, i) {\n    dynamicFormSets.push(new DynamicFormSet(formset));\n  });\n\n  // only calling jquery for select dropdown (used for icon select for map modules)\n  if (__webpack_provided_window_dot_jQuery.fn.selectdropdown) {\n    __webpack_provided_window_dot_jQuery('.category-icon-select').not('.js-form-template .category-icon-select').selectdropdown(selectDropdownSettings);\n  }\n});\n\n//# sourceURL=webpack://adhocracy-plus/./node_modules/adhocracy4/adhocracy4/categories/assets/category_formset.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("./node_modules/adhocracy4/adhocracy4/categories/assets/category_formset.js"));
/******/ }
]);